1. __init__.py
职责：
这个文件通常用于将 flaskApp 目录标记为一个 Python 包。它可以包含一些初始化代码，当整个包被导入时会执行这些代码。例如，它可能会创建 Flask 应用实例，并进行一些全局的配置或初始化操作，如初始化数据库连接等。
2. app.py
职责：
是 Flask 应用的主要入口点。
负责创建 Flask 应用实例（app = Flask(__name__)）。
配置应用的各种设置，如数据库连接字符串（app.config['SQLALCHEMY_DATABASE_URI']）、调试模式等。
定义路由和视图函数，处理 HTTP 请求并返回响应。例如，定义根路由 @app.route('/') 及其对应的视图函数 index，用于处理对应用根路径的访问请求。
可能还会包含一些与应用启动和运行相关的逻辑，如启动开发服务器（app.run(debug=True)）。
3. config.py
职责：
集中管理应用的配置信息。
可以定义各种配置项，如数据库连接配置、密钥、日志配置、第三方服务的 API 密钥等。
这些配置可以通过 from flaskApp.config import Config 在其他模块中被导入和使用，使得配置信息更加集中和易于管理，方便在不同环境（开发、测试、生产）中进行切换和配置。
4. db_operations.py
职责：
专注于数据库操作相关的业务逻辑。
可能包含函数或类来执行对数据库的增删改查操作。例如，定义函数来保存钢铁价格数据到数据库（如之前提到的 save_steel_price 函数），查询特定条件的数据，更新数据等。
这些操作通常会与数据库模型（在 models.py 中定义）进行交互，通过 SQLAlchemy 等 ORM 工具来实现对数据库的操作，而不是直接编写 SQL 语句。
5. models.py
职责：
定义数据库模型类，这些类与数据库中的表结构相对应。
例如，可能会有一个 SteelPrice 类，它定义了钢铁价格数据在数据库中的表结构，包括字段（如 id、name、price、timestamp 等）及其数据类型、主键、外键等约束。
这些模型类是 SQLAlchemy 等 ORM 框架与数据库交互的基础，其他模块（如 db_operations.py 和视图函数）通过这些模型类来操作数据库中的数据。
6. routes.py
职责：
专门用于定义路由和视图函数，将应用的不同功能模块的路由和视图分离出来，使 app.py 更加简洁和专注于应用的核心配置和启动逻辑。
可以在这个文件中定义多个路由和对应的视图函数，例如，除了根路由外，还可以定义 /prices 路由来展示所有钢铁价格数据，/prices/<int:price_id> 路由来展示特定价格记录的详细信息等。
通过将路由和视图函数分离到 routes.py 中，可以使代码结构更加清晰，便于维护和扩展。
7. templates 目录
职责：
存放 HTML 模板文件，用于渲染视图函数返回的响应。
例如，可能会有 index.html、prices.html 等模板文件，这些模板文件使用 Jinja2 等模板引擎的语法，根据视图函数传递的数据动态生成 HTML 页面，展示给用户。
模板文件可以包含页面的布局、样式、动态数据的展示等内容，与视图函数配合，实现应用的前端展示功能。
8. instance 目录
职责：
通常用于存放一些不应该被版本控制系统跟踪的文件，如 SQLite 数据库文件、日志文件、配置文件等。
这个目录在 Flask 应用中具有特殊的地位，Flask 会自动识别并使用其中的文件。例如，如果使用 SQLite 数据库，数据库文件可以放在 instance 目录下，这样可以避免将数据库文件提交到版本控制系统中，同时也方便在不同环境中管理数据库文件。