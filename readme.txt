flask  Flask 是一个轻量级的 Python Web 开发框架，它简单易用，适合快速开发小型到中型的 Web 应用程序
scrapy 是一个强大的 Python 爬虫框架，用于从网站上提取结构化数据。它具有高效、快速和可扩展的特点，适用于大规模的数据抓取任务。
BeautifulSoup 是 Python 中一个用于解析 HTML 和 XML 文档的库，它提供了一种简单而强大的方式来遍历、搜索和修改解析树，帮助你从网页中提取所需的数据
flask_sqlalchemy 是一个 Flask 扩展，它简化了在 Flask 应用中使用 SQLAlchemy 的过程，使得在 Python 中操作关系型数据库变得更加方便和高效。
APScheduler 可以避免阻塞主线程，更适合在生产环境中使用。

SQLite 项目中使用的数据库为SQLliteSQLite 不需要像 MySQL、Oracle 等传统数据库那样启动一个单独的数据库服务器进程。
它直接读写磁盘上的数据库文件，这使得它的使用非常方便，尤其是在一些小型应用或者嵌入式设备中。例如，在一个 Python 脚本中使用 SQLite，
只需要导入sqlite3模块就可以直接操作数据库，无需额外的配置和管理数据库服务器。




from flask import Flask：从 Flask 库中导入 Flask 类。
app = Flask(__name__)：创建一个 Flask 应用实例，__name__ 表示当前模块的名称。
@app.route('/')：一个装饰器，将下面的函数绑定到根 URL（/）。
def hello_world():：定义一个处理函数，当用户访问根 URL 时会调用这个函数。


echart有几个有趣的展示
数据大屏展示
特点：将多个不同类型的 ECharts 图表组合在一个大屏幕上，形成一个综合性的数据展示平台。通过合理的布局和配色，能够展示大量的数据信息，给人一种直观、震撼的视觉效果。
应用场景：常用于企业监控中心、指挥中心、数据中心等场所，例如企业可以通过数据大屏实时展示销售数据、生产数据、物流数据等；城市管理部门可以用它展示城市的交通流量、环境监测数据、能源消耗数据等。
3D 图表展示
特点：ECharts 支持创建具有立体感的 3D 图表，如 3D 柱状图、3D 散点图、3D 饼图等。这些 3D 图表能够更加生动地展示数据，增加数据的层次感和空间感，使数据展示更加直观和有趣。
应用场景：在数据可视化分析、数据汇报、展览展示等场景中，3D 图表可以吸引观众的注意力，更好地传达数据信息。比如在房地产行业，可以用 3D 柱状图展示不同楼盘的销售数据；在教育领域，用 3D 饼图展示不同学科的成绩分布。
动态交互图表展示
特点：ECharts 具有强大的交互功能，用户可以通过鼠标悬停、点击、缩放、拖拽等操作与图表进行交互。还可以设置数据的动态更新和动画效果，让图表中的数据能够实时变化或按照一定的规律动态展示。
应用场景：在数据探索、数据分析报告、在线数据可视化工具等场景中，动态交互图表能够让用户更加深入地了解数据，发现数据背后的规律和趋势。比如在股票分析中，用户可以通过交互操作查看不同时间段的股票走势；在电商数据展示中，通过动态更新数据实时了解商品的销售情况。
地图类展示
特点：包括地理地图、热力图、流向图等。地理地图可以展示数据在不同地理位置上的分布情况；热力图通过颜色的深浅来表示数据的密度或强度；流向图可以展示数据在不同地点之间的流动方向和强度。
应用场景：适用于地理信息相关的数据展示，如人口分布、城市规划、物流配送路径规划、旅游景点热度分析等。
关系图展示
特点：如桑基图、和弦图等。桑基图可以展示数据在不同节点之间的流动和分配关系，节点之间的连线宽度表示数据流量的大小；和弦图用于展示多个对象之间的关系强度。
应用场景：常用于能源、物流等领域展示资源在各个环节的分配和流动情况，也可用于展示社交网络中用户之间的关系、知识图谱中概念之间的关联等。



use  使用部分

1. __init__.py
职责：
这个文件通常用于将 flaskApp 目录标记为一个 Python 包。它可以包含一些初始化代码，当整个包被导入时会执行这些代码。例如，它可能会创建 Flask 应用实例，并进行一些全局的配置或初始化操作，如初始化数据库连接等。
2. app.py
职责：
是 Flask 应用的主要入口点。
负责创建 Flask 应用实例（app = Flask(__name__)）。
配置应用的各种设置，如数据库连接字符串（app.config['SQLALCHEMY_DATABASE_URI']）、调试模式等。
定义路由和视图函数，处理 HTTP 请求并返回响应。例如，定义根路由 @app.route('/') 及其对应的视图函数 index，用于处理对应用根路径的访问请求。
可能还会包含一些与应用启动和运行相关的逻辑，如启动开发服务器（app.run(debug=True)）。
3. config.py
职责：
集中管理应用的配置信息。
可以定义各种配置项，如数据库连接配置、密钥、日志配置、第三方服务的 API 密钥等。
这些配置可以通过 from flaskApp.config import Config 在其他模块中被导入和使用，使得配置信息更加集中和易于管理，方便在不同环境（开发、测试、生产）中进行切换和配置。
4. db_operations.py
职责：
专注于数据库操作相关的业务逻辑。
可能包含函数或类来执行对数据库的增删改查操作。例如，定义函数来保存钢铁价格数据到数据库（如之前提到的 save_steel_price 函数），查询特定条件的数据，更新数据等。
这些操作通常会与数据库模型（在 models.py 中定义）进行交互，通过 SQLAlchemy 等 ORM 工具来实现对数据库的操作，而不是直接编写 SQL 语句。
5. models.py
职责：
定义数据库模型类，这些类与数据库中的表结构相对应。
例如，可能会有一个 SteelPrice 类，它定义了钢铁价格数据在数据库中的表结构，包括字段（如 id、name、price、timestamp 等）及其数据类型、主键、外键等约束。
这些模型类是 SQLAlchemy 等 ORM 框架与数据库交互的基础，其他模块（如 db_operations.py 和视图函数）通过这些模型类来操作数据库中的数据。
6. routes.py
职责：
专门用于定义路由和视图函数，将应用的不同功能模块的路由和视图分离出来，使 app.py 更加简洁和专注于应用的核心配置和启动逻辑。
可以在这个文件中定义多个路由和对应的视图函数，例如，除了根路由外，还可以定义 /prices 路由来展示所有钢铁价格数据，/prices/<int:price_id> 路由来展示特定价格记录的详细信息等。
通过将路由和视图函数分离到 routes.py 中，可以使代码结构更加清晰，便于维护和扩展。
7. templates 目录
职责：
存放 HTML 模板文件，用于渲染视图函数返回的响应。
例如，可能会有 index.html、prices.html 等模板文件，这些模板文件使用 Jinja2 等模板引擎的语法，根据视图函数传递的数据动态生成 HTML 页面，展示给用户。
模板文件可以包含页面的布局、样式、动态数据的展示等内容，与视图函数配合，实现应用的前端展示功能。
8. instance 目录
职责：
通常用于存放一些不应该被版本控制系统跟踪的文件，如 SQLite 数据库文件、日志文件、配置文件等。
这个目录在 Flask 应用中具有特殊的地位，Flask 会自动识别并使用其中的文件。例如，如果使用 SQLite 数据库，数据库文件可以放在 instance 目录下，这样可以避免将数据库文件提交到版本控制系统中，同时也方便在不同环境中管理数据库文件。


本项目的目标
数据处理与管理
数据质量提升
数据清洗：当前系统可能没有对从网页抓取的数据进行深度清洗，可能存在一些噪声数据（如重复数据、错误数据等）。可以添加数据清洗步骤，如去重、异常值检测与处理等，以确保数据的准确性。
数据验证：在存储数据到数据库之前，对数据进行验证，确保日期格式正确、价格在合理范围内等。
数据存储优化
数据库选择：虽然 SQLite 适合小型应用，但对于更复杂的系统，可能需要考虑使用更强大的关系型数据库（如 MySQL、PostgreSQL）或非关系型数据库（如 MongoDB），以应对高并发和大数据量的情况。
数据索引：为数据库表中的常用查询字段（如日期、地区）添加索引，提高查询效率。
数据扩充
多源数据融合：除了现有的网页抓取数据，还可以考虑融合其他数据源，如官方统计数据、行业报告等，以提供更全面的废钢信息。
可视化方面
可视化效果提升
图表多样性：除了现有的柱状图，可增加更多类型的图表，如折线图展示价格趋势、箱线图展示价格分布、地图展示不同地区的废钢价格分布等。
交互性增强：除了现有的鼠标悬停、点击等交互方式，还可以添加更多交互功能，如数据筛选、排序、钻取等，让用户能够更深入地探索数据。
可视化优化：使用更专业的可视化设计原则，如合理的配色方案、清晰的标注、适当的动画效果等，提高可视化的可读性和美观性。
可视化定制
用户定制：允许用户根据自己的需求定制可视化界面，如选择显示的字段、图表类型、时间范围等。
系统架构与性能
性能优化
异步处理：对于一些耗时的操作，如数据抓取和处理，可以使用异步编程技术（如 Python 的 asyncio 库），避免阻塞主线程，提高系统的响应速度。
缓存机制：对于频繁查询的数据，可以使用缓存技术（如 Redis），减少数据库查询次数，提高系统性能。
系统架构升级
微服务架构：将系统拆分为多个微服务，如数据抓取服务、数据处理服务、可视化服务等，提高系统的可扩展性和可维护性。
容器化部署：使用 Docker 容器化技术，将系统部署到容器中，便于部署和管理。
安全性与可靠性
安全性增强
数据加密：对敏感数据（如数据库中的价格数据）进行加密存储，防止数据泄露。
用户认证与授权：添加用户认证和授权机制，确保只有授权用户才能访问系统和数据。
可靠性保障
容错处理：在数据抓取和处理过程中，添加容错处理机制，如重试机制、错误日志记录等，确保系统在出现异常情况时能够继续正常运行。
备份与恢复：定期对数据库进行备份，并制定数据恢复策略，以应对数据丢失或损坏的情况。
文档与可解释性
详细文档：编写详细的系统文档，包括系统架构、数据处理流程、可视化设计等，方便其他研究人员理解和复现系统。
可解释性分析：对于可视化结果，提供详细的解释和分析，帮助用户理解数据背后的含义和趋势。